version: "3"

dotenv: [".env"]

vars:
  GO_MODULE: zori

tasks:
  server:
    desc: Start the HTTP server (default port 1323)
    cmds:
      - go run . server

  ingestion:
    aliases:
      - i
    desc: Start the IngestionHTTP server (default port 1324)
    cmds:
      - go run . ingestion

  migrate:all:up:
    desc: Run all pending database migrations
    cmds:
      - task:migrate:up
      - task:migrate:clickhouse:up

  migrate:up:
    desc: Run all pending database migrations
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" up

  migrate:clickhouse:up:
    desc: Run all pending database migrations
    cmds:
      - goose -dir internal/storage/clickhouse/migrations clickhouse "$CLICKHOUSE_URL" up

  migrate:clickhouse:down:
    desc: Rollback the last database migration
    cmds:
      - goose -dir internal/storage/clickhouse/migrations clickhouse "$CLICKHOUSE_URL" down

  migrate:down:
    desc: Rollback the last database migration
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" down

  migrate:status:
    desc: Show database migration status
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" status

  migrate:clickhouse:status:
    desc: Show database migration status
    cmds:
      - goose -dir internal/storage/clickhouse/migrations clickhouse "$CLICKHOUSE_URL" status

  migrate:version:
    desc: Show current migration version
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$DATABASE_URL" version

  migrate:clickhouse:version:
    desc: Show current migration version
    cmds:
      - goose -dir internal/storage/clickhouse/migrations clickhouse "$CLICKHOUSE_URL" version

  migrate:create:
    desc: Create a new migration file
    cmds:
      - goose -dir internal/storage/postgres/migrations create {{.NAME}} sql
    vars:
      NAME: '{{.NAME | default "migration"}}'

  migrate:clickhouse:create:
    desc: Create a new migration file
    cmds:
      - goose -dir internal/storage/clickhouse/migrations create {{.NAME}} sql
    vars:
      NAME: '{{.NAME | default "migration"}}'

  db:setup:
    desc: Initialize database and run all migrations
    cmds:
      - task: migrate:up

  db:reset:
    desc: Reset database (rollback all migrations and re-run)
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$DATABASE_URL" reset
      - task: migrate:up

  docs:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g main.go --parseDependency --parseInternal --parseDepth 2 --parseFuncBody
      - npx api-spec-converter --syntax=json --from=swagger_2 --to=openapi_3 docs/swagger.json > docs/openapi.json
      - npx api-spec-converter --syntax=yaml --from=swagger_2 --to=openapi_3 docs/swagger.yaml > docs/openapi.yaml
      - rm docs/swagger.yaml
      - rm docs/swagger.json
    silent: false

  swag-install:
    desc: Install swag CLI tool
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@latest

  test:
    desc: Run all tests
    dotenv: [".env.test"]
    cmds:
      - go test ./...

  test:verbose:
    desc: Run all tests with verbose output
    dotenv: [".env.test"]
    cmds:
      - go test -v ./...

  # Test database tasks
  test:db:setup:
    desc: Setup test database
    dotenv: [".env.test"]
    cmds:
      - |
        PGPASSWORD=${TEST_DB_PASSWORD:-postgres} psql -h ${TEST_DB_HOST:-localhost} -U ${TEST_DB_USER:-postgres} -c "DROP DATABASE IF EXISTS zori_test"
        PGPASSWORD=${TEST_DB_PASSWORD:-postgres} psql -h ${TEST_DB_HOST:-localhost} -U ${TEST_DB_USER:-postgres} -c "CREATE DATABASE zori_test"

  test:db:reset:
    desc: Reset test database
    dotenv: [".env.test"]
    deps: [test:db:setup]
    cmds:
      - echo "Test database reset complete"

  test:db:migrate:
    desc: Run migrations on test database
    dotenv: [".env.test"]
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$TEST_POSTGRES_URL" up

  # Code quality tasks
  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy

  # Clean tasks
  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - rm -f {{.GO_MODULE}}
      - rm -f coverage.out coverage.html
      - go clean -testcache

  start:
    desc: Quick start - setup environment and run server
    cmds:
      - task: migrate:up
      - task: server
