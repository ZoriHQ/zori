version: "3"

dotenv: [".env"]

vars:
  GO_MODULE: zori

tasks:
  # Server tasks
  server:
    desc: Start the HTTP server (default port 1323)
    cmds:
      - go run . server

  ingestion:
    aliases:
      - i
    desc: Start the IngestionHTTP server (default port 1324)
    cmds:
      - go run . ingestion

  server:port:
    desc: Start the HTTP server on custom port
    cmds:
      - go run . server --port={{.PORT}}
    vars:
      PORT: '{{.PORT | default "3000"}}'

  server:host:
    desc: Start the HTTP server on custom host and port
    cmds:
      - go run . server --host={{.HOST}} --port={{.PORT}}
    vars:
      HOST: '{{.HOST | default "localhost"}}'
      PORT: '{{.PORT | default "8080"}}'

  # Migration tasks
  migrate:up:
    desc: Run all pending database migrations
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" up

  migrate:down:
    desc: Rollback the last database migration
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" down

  migrate:status:
    desc: Show database migration status
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$POSTGRES_URL" status

  migrate:version:
    desc: Show current migration version
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$DATABASE_URL" version

  migrate:create:
    desc: Create a new migration file
    cmds:
      - goose -dir internal/storage/postgres/migrations create {{.NAME}} sql
    vars:
      NAME: '{{.NAME | default "migration"}}'

  # Database setup tasks
  db:setup:
    desc: Initialize database and run all migrations
    cmds:
      - task: migrate:up

  db:reset:
    desc: Reset database (rollback all migrations and re-run)
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$DATABASE_URL" reset
      - task: migrate:up

  # Development tasks
  dev:
    desc: Run the application in development mode with hot reload
    cmds:
      - air
    silent: true

  docs:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g main.go --parseDependency --parseInternal --parseDepth 2 --parseFuncBody
      - npx api-spec-converter --syntax=json --from=swagger_2 --to=openapi_3 docs/swagger.json > docs/openapi.json
      - npx api-spec-converter --syntax=yaml --from=swagger_2 --to=openapi_3 docs/swagger.yaml > docs/openapi.yaml
      - rm docs/swagger.yaml
      - rm docs/swagger.json
    silent: false

  swag-install:
    desc: Install swag CLI tool
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@latest

  # Build tasks (for production)
  build:
    desc: Build the application binary
    cmds:
      - go build -o {{.GO_MODULE}} .
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.GO_MODULE}}"

  build:race:
    desc: Build the application with race detection
    cmds:
      - go build -race -o {{.GO_MODULE}} .

  # Testing tasks
  test:
    desc: Run all tests
    dotenv: [".env.test"]
    cmds:
      - go test ./...

  test:verbose:
    desc: Run all tests with verbose output
    dotenv: [".env.test"]
    cmds:
      - go test -v ./...

  test:race:
    desc: Run all tests with race detection
    dotenv: [".env.test"]
    cmds:
      - go test -race ./...

  test:coverage:
    desc: Run tests with coverage report
    dotenv: [".env.test"]
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out | grep "total:"

  test:auth:
    desc: Run authentication tests
    dotenv: [".env.test"]
    cmds:
      - go test -v -race ./services/auth/...

  test:integration:
    desc: Run integration tests with database setup
    dotenv: [".env.test"]
    cmds:
      - ./scripts/run-tests.sh

  test:integration:verbose:
    desc: Run integration tests with verbose output
    dotenv: [".env.test"]
    cmds:
      - ./scripts/run-tests.sh --verbose

  test:integration:coverage:
    desc: Run integration tests with coverage
    dotenv: [".env.test"]
    cmds:
      - ./scripts/run-tests.sh --coverage

  test:unit:
    desc: Run only unit tests (no database)
    dotenv: [".env.test"]
    cmds:
      - go test -v -short ./...

  test:specific:
    desc: Run specific test by name
    dotenv: [".env.test"]
    cmds:
      - go test -v -run={{.TEST}} ./...
    vars:
      TEST: '{{.TEST | default "Test"}}'

  test:watch:
    desc: Run tests in watch mode (requires entr)
    dotenv: [".env.test"]
    cmds:
      - find . -name "*.go" | entr -c go test ./...

  # Test database tasks
  test:db:setup:
    desc: Setup test database
    dotenv: [".env.test"]
    cmds:
      - |
        PGPASSWORD=${TEST_DB_PASSWORD:-postgres} psql -h ${TEST_DB_HOST:-localhost} -U ${TEST_DB_USER:-postgres} -c "DROP DATABASE IF EXISTS zori_test"
        PGPASSWORD=${TEST_DB_PASSWORD:-postgres} psql -h ${TEST_DB_HOST:-localhost} -U ${TEST_DB_USER:-postgres} -c "CREATE DATABASE zori_test"

  test:db:reset:
    desc: Reset test database
    dotenv: [".env.test"]
    deps: [test:db:setup]
    cmds:
      - echo "Test database reset complete"

  test:db:migrate:
    desc: Run migrations on test database
    dotenv: [".env.test"]
    cmds:
      - goose -dir internal/storage/postgres/migrations postgres "$TEST_POSTGRES_URL" up

  # Code quality tasks
  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy

  # Clean tasks
  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - rm -f {{.GO_MODULE}}
      - rm -f coverage.out coverage.html
      - go clean -testcache

  clean:all:
    desc: Clean everything including go module cache
    deps: [clean]
    cmds:
      - go clean -modcache

  # Development workflow tasks
  check:
    desc: Run all code quality checks
    deps: [fmt, vet, lint, test]

  install:deps:
    desc: Install/update development dependencies
    cmds:
      - go install github.com/cosmtrek/air@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - go get -u github.com/stretchr/testify

  # Docker tasks (if needed)
  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.GO_MODULE}}:latest .

  docker:run:
    desc: Run Docker container
    cmds:
      - docker run -p 8080:8080 --env-file .env {{.GO_MODULE}}:latest

  # Environment setup
  env:copy:
    desc: Copy example.env to .env
    cmds:
      - cp example.env .env
      - echo "Copied example.env to .env - please update with your values"
    status:
      - test -f .env

  env:test:
    desc: Setup test environment
    cmds:
      - |
        if [ ! -f .env.test ]; then
          echo "Creating .env.test file..."
          cat > .env.test << 'EOF'
        TEST_POSTGRES_URL=postgres://postgres:postgres@localhost:5432/zori_test?sslmode=disable
        TEST_CLICKHOUSE_URL=clickhouse://localhost:9000/zori_test
        JWT_SECRET_KEY=test-secret-key-for-testing-purposes-min-32-chars
        JWT_ACCESS_TOKEN_TTL=15m
        JWT_REFRESH_TOKEN_TTL=168h
        BCRYPT_COST=4
        EOF
          echo "✅ .env.test file created"
        else
          echo "✅ .env.test file already exists"
        fi

  env:check:
    desc: Check if .env file exists and show variables
    cmds:
      - |
        if [ -f .env ]; then
          echo "✅ .env file exists"
          echo "Environment variables loaded:"
          cat .env | grep -v '^#' | grep -v '^$' | cut -d'=' -f1 | sed 's/^/  - /'
        else
          echo "❌ .env file not found. Run 'task env:copy' to create one."
          exit 1
        fi

  # Quick start task
  start:
    desc: Quick start - setup environment and run server
    cmds:
      - task: env:copy
      - task: migrate:up
      - task: server

  # Help task
  help:
    desc: Show available tasks
    cmds:
      - task --list-all
