basePath: /api/v1
definitions:
  models.Account:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      organizations:
        description: Relations
        items:
          $ref: '#/definitions/models.Organization'
        type: array
      updated_at:
        type: string
    required:
    - email
    type: object
  models.Organization:
    properties:
      created_at:
        type: string
      id:
        type: string
      members:
        description: Relations
        items:
          $ref: '#/definitions/models.Account'
        type: array
      name:
        maxLength: 255
        minLength: 1
        type: string
      slug:
        maxLength: 255
        minLength: 1
        type: string
      updated_at:
        type: string
    required:
    - name
    - slug
    type: object
  services.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      account:
        $ref: '#/definitions/models.Account'
      expires_in:
        example: 900
        type: integer
      organization:
        $ref: '#/definitions/models.Organization'
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  services.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: SecurePassword123!
        type: string
    required:
    - email
    - password
    type: object
  services.LogoutRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  services.MessageResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  services.RecoverConfirmRequest:
    properties:
      password:
        example: NewSecurePassword123!
        minLength: 8
        type: string
      token:
        example: recovery-token-from-email
        type: string
    required:
    - password
    - token
    type: object
  services.RecoverRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  services.RefreshRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  services.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      organization_name:
        example: Acme Corporation
        type: string
      password:
        example: SecurePassword123!
        minLength: 8
        type: string
    required:
    - email
    - organization_name
    - password
    type: object
externalDocs:
  description: Zori API Documentation
  url: https://docs.zorihq.com
host: api.prod.zorihq.com
info:
  contact:
    email: support@zorihq.com
    name: Zori Support
    url: https://www.zorihq.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://swagger.io/terms/
  title: OpenAPI Specification for Zori server
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Invalid email or password
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the current session and refresh token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/services.MessageResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
      summary: User logout
      tags:
      - Authentication
  /api/v1/auth/recover:
    post:
      consumes:
      - application/json
      description: Send a password recovery email to the registered email address
      parameters:
      - description: Recovery request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RecoverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recovery email sent if account exists
          schema:
            $ref: '#/definitions/services.MessageResponse'
        "400":
          description: Invalid email format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Request password recovery
      tags:
      - Authentication
  /api/v1/auth/recover-confirm:
    post:
      consumes:
      - application/json
      description: Reset password using recovery token received via email
      parameters:
      - description: Recovery confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RecoverConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password successfully reset
          schema:
            $ref: '#/definitions/services.MessageResponse'
        "400":
          description: Invalid or expired token
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Password validation failed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Confirm password recovery
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchange a valid refresh token for new access and refresh tokens
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed tokens
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Invalid or expired refresh token
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Session not found or expired
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with an organization
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered and authenticated
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Invalid request or validation failed
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Account with email already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new account
      tags:
      - Authentication
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
